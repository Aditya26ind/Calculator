# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'calculator.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import math
import mpmath


class Ui_Calculator(object):
    def __init__(self,flag_tan,flag_cos,flag_sin,flag_sec,DotDot):
        self.flag_tan=flag_tan
        self.flag_sin=flag_sin
        self.flag_sec=flag_sec
        self.flag_cos=flag_cos
        self.DotDot=DotDot
    def setupUi(self, Calculator):
        Calculator.setObjectName("Calculator")
        Calculator.resize(500, 550)
        Calculator.setMinimumSize(QtCore.QSize(500, 550))
        Calculator.setMaximumSize(QtCore.QSize(500, 550))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        Calculator.setFont(font)
        Calculator.setLayoutDirection(QtCore.Qt.LeftToRight)
        Calculator.setAutoFillBackground(False)
        Calculator.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.centralwidget = QtWidgets.QWidget(Calculator)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 20, 431, 61))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("background-color: rgb(255, 255, 255,0.4);\n"
"border-radius:10px 10px 10px 10px;")
        self.label.setTextFormat(QtCore.Qt.MarkdownText)
        self.label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(30, 50, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("background-color: rgb(255, 255, 255,0.4);\n"
"border-radius:10px 10px 10px 10px;")
        self.label_2.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_2.setObjectName("label_2")
        self.pushButton_1 = QtWidgets.QPushButton(self.centralwidget,clicked=lambda :self.pressed_it("1"))
        self.pushButton_1.setGeometry(QtCore.QRect(60, 130, 61, 51))
        self.pushButton_1.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0.727, y1:1, x2:0.08, y2:0.136364, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_1.setObjectName("pushButton_1")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.pressed_it("3"))
        self.pushButton_3.setGeometry(QtCore.QRect(200, 130, 61, 51))
        self.pushButton_3.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0.727, y1:1, x2:0.08, y2:0.136364, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.pressed_it("2"))
        self.pushButton_2.setGeometry(QtCore.QRect(130, 130, 61, 51))
        self.pushButton_2.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0.727, y1:1, x2:0.08, y2:0.136364, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.pressed_it("6"))
        self.pushButton_6.setGeometry(QtCore.QRect(200, 190, 61, 51))
        self.pushButton_6.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0.727, y1:1, x2:0.08, y2:0.136364, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.pressed_it("5"))
        self.pushButton_5.setGeometry(QtCore.QRect(130, 190, 61, 51))
        self.pushButton_5.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0.727, y1:1, x2:0.08, y2:0.136364, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.pressed_it("7"))
        self.pushButton_7.setGeometry(QtCore.QRect(60, 250, 61, 51))
        self.pushButton_7.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0.727, y1:1, x2:0.08, y2:0.136364, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget,clicked=lambda :self.pressed_it("9"))
        self.pushButton_9.setGeometry(QtCore.QRect(200, 250, 61, 51))
        self.pushButton_9.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0.727, y1:1, x2:0.08, y2:0.136364, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_dot = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.DOTdot("."))
        self.pushButton_dot.setGeometry(QtCore.QRect(60, 310, 61, 51))
        self.pushButton_dot.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0.727, y1:1, x2:0.08, y2:0.136364, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_dot.setObjectName("pushButton_dot")
        self.pushButton_star = QtWidgets.QPushButton(self.centralwidget,clicked=lambda :self.pressed_it("*"))
        self.pushButton_star.setGeometry(QtCore.QRect(200, 310, 61, 51))
        self.pushButton_star.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0.727, y1:1, x2:0.08, y2:0.136364, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_star.setObjectName("pushButton_star")
        self.pushButton_plus = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.pressed_it("+"))
        self.pushButton_plus.setGeometry(QtCore.QRect(60, 370, 61, 51))
        self.pushButton_plus.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0.727, y1:1, x2:0.08, y2:0.136364, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_plus.setObjectName("pushButton_plus")
        self.pushButton_minus = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.pressed_it("-"))
        self.pushButton_minus.setGeometry(QtCore.QRect(130, 370, 61, 51))
        self.pushButton_minus.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0.727, y1:1, x2:0.08, y2:0.136364, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_minus.setObjectName("pushButton_minus")
        self.pushButton_0 = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.pressed_it("0"))
        self.pushButton_0.setGeometry(QtCore.QRect(130, 310, 61, 51))
        self.pushButton_0.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0.727, y1:1, x2:0.08, y2:0.136364, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_0.setObjectName("pushButton_0")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.pressed_it("8"))
        self.pushButton_8.setGeometry(QtCore.QRect(130, 250, 61, 51))
        self.pushButton_8.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0.727, y1:1, x2:0.08, y2:0.136364, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.pressed_it("4"))
        self.pushButton_4.setGeometry(QtCore.QRect(60, 190, 61, 51))
        self.pushButton_4.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0.727, y1:1, x2:0.08, y2:0.136364, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_sin = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.tanwork("sin"))
        self.pushButton_sin.setGeometry(QtCore.QRect(300, 130, 61, 51))
        self.pushButton_sin.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(39, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_sin.setObjectName("pushButton_sin")
        self.pushButton_cos = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.tanwork("cos"))
        self.pushButton_cos.setGeometry(QtCore.QRect(380, 130, 61, 51))
        self.pushButton_cos.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(39, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));")
        self.pushButton_cos.setObjectName("pushButton_cos")
        self.pushButton_tan = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.tanwork("tan"))
        self.pushButton_tan.setGeometry(QtCore.QRect(300, 190, 61, 51))
        self.pushButton_tan.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(39, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));")
        self.pushButton_tan.setObjectName("pushButton_tan")
        self.pushButton_sec = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.tanwork("sec"))
        self.pushButton_sec.setGeometry(QtCore.QRect(380, 190, 61, 51))
        self.pushButton_sec.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(39, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));")
        self.pushButton_sec.setObjectName("pushButton_sec")
        self.pushButton_remove = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.remove())
        self.pushButton_remove.setGeometry(QtCore.QRect(380, 250, 61, 51))
        self.pushButton_remove.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(0, 208, 23, 255), stop:1 rgba(255, 255, 255, 255));\n"
"border-radius:25px;\n"
"")
        self.pushButton_remove.setObjectName("pushButton_remove")
        self.pushButton_cls = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.tanwork("cls"))
        self.pushButton_cls.setGeometry(QtCore.QRect(300, 250, 61, 51))
        self.pushButton_cls.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(225, 38, 21, 255), stop:1 rgba(255, 255, 255, 255))")
        self.pushButton_cls.setObjectName("pushButton_cls")
        self.pushButton_divide = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.pressed_it("/"))
        self.pushButton_divide.setGeometry(QtCore.QRect(200, 370, 61, 51))
        self.pushButton_divide.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0.727, y1:1, x2:0.08, y2:0.136364, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_divide.setObjectName("pushButton_divide")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(0, 530, 491, 21))
        self.label_3.setStyleSheet("color:white;\n"
"")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.pushButton_equal = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.equals())
        self.pushButton_equal.setGeometry(QtCore.QRect(300, 370, 61, 51))
        self.pushButton_equal.setStyleSheet("\n"
"border-radius:25px;\n"
"background-color: qlineargradient(spread:pad, x1:0.727, y1:1, x2:0.08, y2:0.136364, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"")
        self.pushButton_equal.setObjectName("pushButton_equal")
        Calculator.setCentralWidget(self.centralwidget)

        self.retranslateUi(Calculator)
        QtCore.QMetaObject.connectSlotsByName(Calculator)
    def tanwork(self,pressed):
        if pressed=="cls":
            self.label_2.setText("0")
            self.label.setText("0")
            self.pushButton_minus.setEnabled(True)
            self.pushButton_plus.setEnabled(True)
            self.pushButton_divide.setEnabled(True)
            self.pushButton_star.setEnabled(True)
            self.pushButton_cos.setEnabled(True)
            self.pushButton_sec.setEnabled(True)
            self.pushButton_sin.setEnabled(True)
            self.pushButton_tan.setEnabled(True)
            if self.DotDot==False:
                self.DotDot=True
        elif pressed=="tan":
            self.flag_tan=True
            if self.flag_tan==True:
                self.label_2.setText(f"{pressed}")
                self.pushButton_minus.setEnabled(False)
                self.pushButton_plus.setEnabled(False)
                self.pushButton_divide.setEnabled(False)
                self.pushButton_star.setEnabled(False)
                self.pushButton_cos.setEnabled(False)
                self.pushButton_sec.setEnabled(False)
                self.pushButton_sin.setEnabled(False)
        elif pressed == "sec":
            self.flag_sec = True
            if self.flag_sec==True:
                self.label_2.setText(f"{pressed}")
                self.pushButton_minus.setEnabled(False)
                self.pushButton_plus.setEnabled(False)
                self.pushButton_divide.setEnabled(False)
                self.pushButton_star.setEnabled(False)
                self.pushButton_cos.setEnabled(False)
                self.pushButton_tan.setEnabled(False)
                self.pushButton_sin.setEnabled(False)
        elif pressed == "sin":
            self.flag_sin = True
            if self.flag_sin==True:
                self.label_2.setText(f"{pressed}")
                self.pushButton_minus.setEnabled(False)
                self.pushButton_plus.setEnabled(False)
                self.pushButton_divide.setEnabled(False)
                self.pushButton_star.setEnabled(False)
                self.pushButton_cos.setEnabled(False)
                self.pushButton_sec.setEnabled(False)
                self.pushButton_tan.setEnabled(False)
        elif pressed == "cos":
            self.flag_cos = True
            if self.flag_cos==True:
                self.label_2.setText(f"{pressed}")
                self.pushButton_minus.setEnabled(False)
                self.pushButton_plus.setEnabled(False)
                self.pushButton_divide.setEnabled(False)
                self.pushButton_star.setEnabled(False)
                self.pushButton_tan.setEnabled(False)
                self.pushButton_sec.setEnabled(False)
                self.pushButton_sin.setEnabled(False)
    def equals(self):
        if self.flag_tan==True:
            try:
                tan_data=list(self.label_2.text())
                tan_data.remove("t")
                tan_data.remove("a")
                tan_data.remove('n')
                number_to_be_calc=''.join(tan_data)
                if self.label.text()=="0":
                    self.label.setText(str(round(math.tan(float(number_to_be_calc)),3)))
                else:
                    self.label.setText(f"{self.label.text()}{str(round(math.tan(float(number_to_be_calc)),3))}")
                self.label_2.setText("0")
                self.pushButton_cos.setEnabled(True)
                self.pushButton_minus.setEnabled(True)
                self.pushButton_plus.setEnabled(True)
                self.pushButton_divide.setEnabled(True)
                self.pushButton_star.setEnabled(True)
                self.pushButton_tan.setEnabled(True)
                self.pushButton_sec.setEnabled(True)
                self.pushButton_sin.setEnabled(True)
                self.flag_tan=False
            except:
                self.label_2.setText("Err")
        elif self.flag_sin==True:
            try:
                sin_data = list(self.label_2.text())
                sin_data.remove("s")
                sin_data.remove("i")
                sin_data.remove('n')
                number_to_be_calc = ''.join(sin_data)
                if self.label.text()=="0":
                    self.label.setText(str(round(math.sin(float(number_to_be_calc)),3)))
                else:
                    self.label.setText(f"{self.label.text()}{str(round(math.sin(float(number_to_be_calc)),3))}")
                self.label_2.setText("0")
                self.pushButton_cos.setEnabled(True)
                self.pushButton_minus.setEnabled(True)
                self.pushButton_plus.setEnabled(True)
                self.pushButton_divide.setEnabled(True)
                self.pushButton_star.setEnabled(True)
                self.pushButton_tan.setEnabled(True)
                self.pushButton_sec.setEnabled(True)
                self.pushButton_sin.setEnabled(True)
                self.flag_sin=False
            except:
                self.label_2.setText("Err")
        elif self.flag_cos==True:
            try:
                cos_data = list(self.label_2.text())
                cos_data.remove("c")
                cos_data.remove("o")
                cos_data.remove('s')
                number_to_be_calc = ''.join(cos_data)
                if self.label.text()=="0":
                    self.label.setText(str(round(math.cos(float(number_to_be_calc)),3)))
                else:
                    self.label.setText(f"{self.label.text()}{str(round(math.cos(float(number_to_be_calc)),3))}")
                self.label_2.setText("0")
                self.pushButton_cos.setEnabled(True)
                self.pushButton_minus.setEnabled(True)
                self.pushButton_plus.setEnabled(True)
                self.pushButton_divide.setEnabled(True)
                self.pushButton_star.setEnabled(True)
                self.pushButton_tan.setEnabled(True)
                self.pushButton_sec.setEnabled(True)
                self.pushButton_sin.setEnabled(True)
                self.flag_cos=False
            except:
                self.label_2.setText("Err")
        elif self.flag_sec==True:
            try:
                sec_data = list(self.label_2.text())
                sec_data.remove("s")
                sec_data.remove("e")
                sec_data.remove('c')
                number_to_be_calc = ''.join(sec_data)
                if self.label.text()=="0":
                    self.label.setText(str(round(mpmath.sec(float(number_to_be_calc)),3)))
                else:
                    self.label.setText(f"{self.label.text()}{str(round(mpmath.sec(float(number_to_be_calc)),3))}")
                self.label_2.setText("0")
                self.pushButton_cos.setEnabled(True)
                self.pushButton_minus.setEnabled(True)
                self.pushButton_plus.setEnabled(True)
                self.pushButton_divide.setEnabled(True)
                self.pushButton_star.setEnabled(True)
                self.pushButton_tan.setEnabled(True)
                self.pushButton_sec.setEnabled(True)
                self.pushButton_sin.setEnabled(True)
                self.flag_sec=False
            except:
                self.label_2.setText("Err")
        else:
            try:
                to_evaluate=self.label.text()
                ans=eval(to_evaluate)
                self.label.setText(str(ans))
            except:
                self.label.setText("err")
        self.DotDot = True
    def pressed_it(self,pressedt):
        if self.flag_tan==True or self.flag_sec==True or self.flag_cos==True or self.flag_sin==True:
            self.label_2.setText(f"{self.label_2.text()}{pressedt}")
        elif self.DotDot==False and pressedt=="+" or pressedt=="-" or pressedt=="*" or pressedt=="/":
            self.DotDot=True
            if self.label.text()=="0" or self.label.text()=="err":
                self.label.setText(pressedt)
            else:
                self.label.setText(f"{self.label.text()}{pressedt}")
        else:
            if self.label.text()=="0" or self.label.text()=="err":
                self.label.setText(pressedt)
            else:
                self.label.setText(f"{self.label.text()}{pressedt}")
    def remove(self):
        if self.flag_tan==True or self.flag_sec==True or self.flag_cos==True or self.flag_sin==True:
            current_list=list(self.label_2.text())
            poped=current_list.pop(len(current_list)-1)
            erase=self.label_2.text()[:-1]
            if poped==".":
                self.DotDot=True
            self.label_2.setText(erase)
        else:
            current_list = list(self.label.text())
            poped=current_list.pop(len(current_list) - 1)
            erase_in_big=self.label.text()[:-1]
            if poped==".":
                self.DotDot=True
            self.label.setText(erase_in_big)
    def DOTdot(self,pressed):
        if self.DotDot==True:
            if self.flag_tan==True or self.flag_sin==True or self.flag_cos==True or self.flag_sec==True :
                self.label_2.setText(f"{self.label_2.text()}{pressed}")
                self.DotDot=False
            else:
                self.label.setText(f"{self.label.text()}{pressed}")
                self.DotDot=False
        else:
            if self.flag_tan == True or self.flag_sin == True or self.flag_cos == True or self.flag_sec == True:
                self.label_2.setText(f"{self.label_2.text()}")
            else:
                self.label.setText(f"{self.label.text()}")

    def retranslateUi(self, Calculator):
        _translate = QtCore.QCoreApplication.translate
        Calculator.setWindowTitle(_translate("Calculator", "MainWindow"))
        self.label.setText(_translate("Calculator", "0"))
        self.label_2.setText(_translate("Calculator", "0"))
        self.pushButton_1.setText(_translate("Calculator", "1"))
        self.pushButton_3.setText(_translate("Calculator", "3"))
        self.pushButton_2.setText(_translate("Calculator", "2"))
        self.pushButton_6.setText(_translate("Calculator", "6"))
        self.pushButton_5.setText(_translate("Calculator", "5"))
        self.pushButton_7.setText(_translate("Calculator", "7"))
        self.pushButton_9.setText(_translate("Calculator", "9"))
        self.pushButton_dot.setText(_translate("Calculator", "."))
        self.pushButton_star.setText(_translate("Calculator", "*"))
        self.pushButton_plus.setText(_translate("Calculator", "+"))
        self.pushButton_minus.setText(_translate("Calculator", "-"))
        self.pushButton_0.setText(_translate("Calculator", "0"))
        self.pushButton_8.setText(_translate("Calculator", "8"))
        self.pushButton_4.setText(_translate("Calculator", "4"))
        self.pushButton_sin.setText(_translate("Calculator", "SIN"))
        self.pushButton_cos.setText(_translate("Calculator", "COS"))
        self.pushButton_tan.setText(_translate("Calculator", "TAN"))
        self.pushButton_sec.setText(_translate("Calculator", "SEC"))
        self.pushButton_remove.setText(_translate("Calculator", "<<"))
        self.pushButton_cls.setText(_translate("Calculator", "CLS"))
        self.pushButton_divide.setText(_translate("Calculator", "/"))
        self.label_3.setText(_translate("Calculator", "calculator "))
        self.pushButton_equal.setText(_translate("Calculator", "="))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Calculator = QtWidgets.QMainWindow()
    ui = Ui_Calculator(False,False,False,False,True)
    ui.setupUi(Calculator)
    Calculator.show()
    sys.exit(app.exec_())
